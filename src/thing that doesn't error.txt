--------------------------------------------------------------------------------
-- Functional Programming (CS256)                                             --
-- Coursework 2: Scratch clone                                                --
--------------------------------------------------------------------------------

module Interpreter where
--------------------------------------------------------------------------------

import Language

--------------------------------------------------------------------------------

-- | In our memory, named locations map to values.
type Memory = [(String, Int)]

-- | Enumerates reasons for errors.
data Err
    = DivByZeroError                    -- ^ Division by zero was attempted.
    | NegativeExponentError             -- ^ Raising a number to a negative
                                        -- exponent was attempted.
    | UninitialisedMemory String        -- ^ Tried to read from a variable
                                        -- that does not exist.
    deriving (Eq, Show)

--------------------------------------------------------------------------------
boolOp :: Op -> Int -> Int -> Bool
boolOp Equal a b = a == b
boolOp Neq a b = a /= b
boolOp LessThan a b = a < b
boolOp LessOrEqual a b = a <= b
boolOp GreaterThan a b = a > b
boolOp GreaterOrEqual a b = a >= b

intOp :: Op -> Int -> Int -> Int
intOp Add a b = a + b
intOp Sub a b = a - b
intOp Mul a b = a * b
intOp Div a b = a `div` b
intOp Pow a b = a ^ b

-- Evaluates both var and val based expressions into vals
evalExpr :: Expr -> Memory -> Int
evalExpr (ValE num) mem = num
evalExpr (VarE var) mem = getVal var mem

toMemory :: Either Err Memory -> Memory
toMemory (Right mem) = mem

-- Evaluates an if statement into 0 (false) or something else (true)
-- WARNING, INTTOBOOL HAS BEEN CHANGED TO INCLUDE EITHER BECAUSE OF THE NEED
-- FOR THE OP PART OF THIS TO RETURN EITHER INT OR BOOL. THIS MAY FUCK UP
evalIf :: Expr -> Memory-> Int
evalIf (ValE num) mem = num
evalIf (VarE var) mem = getVal var mem
evalIf (BinOpE op a b) mem = intOp op (evalExpr a mem) (evalExpr b mem)

-- When given a variable name, find the corresponding value within the memory
getVal :: String -> Memory-> Int
getVal name mem = snd(head(filter ((==name).fst) mem))

-- When the variable name is found within the memory, the value is
-- updated to the new Int. If the variable is not in the memory, add it
updateOrAdd :: String -> Int -> Memory -> Bool -> Memory
updateOrAdd name newval [] found     | found = []
                                     | otherwise = [(name, newval)]
updateOrAdd name newval (x:xs) found | fst x == name = (name, newval) : updateOrAdd name newval xs True
                                  | otherwise = x : updateOrAdd name newval xs found

-- | Given a program and the initial memory contents, determines
-- what evaluating the program does to the memory.
interpret :: Program -> Memory -> Either Err Memory
interpret [] mem = Right mem
interpret (AssignStmt name val:xs) [] = Right (updateOrAdd name (evalExpr val []) [] False)
interpret (AssignStmt name val:xs) mem = Right (updateOrAdd name (evalExpr val mem) [] False)

-- interpret (p:ps) mem | p == AssignStmt = 0

--------------------------------------------------------------------------------
